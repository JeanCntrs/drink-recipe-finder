{"version":3,"sources":["components/Header.js","context/CategoriesContext.js","context/RecipesContext.js","components/Error.js","components/Form.js","context/ModalContext.js","components/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriesContext","createContext","CategoriesProvider","props","useState","categories","setCategories","useEffect","a","async","axios","get","data","drinks","getCategories","Provider","value","children","RecipesContext","RecipesProvider","consult","setConsult","recipes","setRecipes","ingredient","category","searchRecipes","setSearchRecipes","url","result","getRecipes","Error","message","Form","useContext","error","setError","search","setSearch","getFormData","event","target","name","onSubmit","preventDefault","trim","type","placeholder","onChange","map","element","key","strCategory","ModalContext","ModalProvider","recipeId","setRecipeId","recipeDetail","setRecipeDetail","getRecipeDetail","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","RecipeList","modalStyle","open","setOpen","classes","idDrink","strDrink","src","strDrinkThumb","alt","onClick","Modal","onClose","style","strInstructions","detail","ingredients","index","push","showIngredients","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAUeA,EARA,WACX,OACI,yBAAKC,UAAU,yEACX,4BAAQA,UAAU,gBAAlB,+B,sDCFCC,EAAoBC,0BAgClBC,EA9BY,SAAAC,GAAU,IAAD,EAEIC,mBAAS,IAFb,mBAEzBC,EAFyB,KAEbC,EAFa,KAsBhC,OAlBAC,qBAAU,YAUgB,mBAAAC,EAAAC,OAAA,sDACN,8DADM,WAAAD,EAAA,MAEOE,IAAMC,IADnB,gEADM,OAEZN,EAFY,OAGlBC,EAAcD,EAAWO,KAAKC,QAHZ,qCAKtBC,KACD,IAGC,kBAACd,EAAkBe,SAAnB,CAA4BC,MAAO,CAAEX,eAChCF,EAAMc,WC1BNC,EAAiBjB,0BA8BfkB,EA5BS,SAAAhB,GAAU,IAAD,EAECC,oBAAS,GAFV,mBAEtBgB,EAFsB,KAEbC,EAFa,OAGCjB,mBAAS,IAHV,mBAGtBkB,EAHsB,KAGbC,EAHa,OAIanB,mBAAS,CAC/CoB,WAAY,GACZC,SAAU,KANe,mBAItBC,EAJsB,KAIPC,EAJO,KAoB7B,OAXApB,qBAAU,WACN,GAAIa,EAAS,EACU,qBAAAZ,EAAAC,OAAA,uDACTmB,EADS,mEACyDF,EAAcF,WADvE,cACuFE,EAAcD,UADrG,WAAAjB,EAAA,MAEME,IAAMC,IAAIiB,IAFhB,OAETC,EAFS,OAGfN,EAAWM,EAAOjB,KAAKC,QAHR,qCAKnBiB,MAEL,CAACJ,IAGA,kBAACR,EAAeH,SAAhB,CAAyBC,MAAO,CAAEM,UAASK,mBAAkBN,eACxDlB,EAAMc,WCjBJc,EARD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACI,yBAAKjC,UAAU,qEACX,gCAASiC,KCwDNC,EAxDF,WAAO,IAER5B,EAAe6B,qBAAWlC,GAA1BK,WAFO,EAG0B6B,qBAAWhB,GAA5CS,EAHO,EAGPA,iBAAkBN,EAHX,EAGWA,WAHX,EAKWjB,oBAAS,GALpB,mBAKR+B,EALQ,KAKDC,EALC,OAMahC,mBAAS,CACjCoB,WAAY,GACZC,SAAU,KARC,mBAMRY,EANQ,KAMAC,EANA,KAWTC,EAAc,SAAAC,GAChBF,EAAU,eACHD,EADE,eAEJG,EAAMC,OAAOC,KAAOF,EAAMC,OAAOzB,UAe1C,OACI,0BAAMjB,UAAU,SAAS4C,SAZR,SAAAH,GACjBA,EAAMI,iBAC2B,KAA7BP,EAAOb,WAAWqB,QAA4C,KAA3BR,EAAOZ,SAASoB,OACnDT,GAAS,IAETA,GAAS,GACTT,EAAiBU,GACjBhB,GAAW,MAMX,8BAAUtB,UAAU,eAChB,0EAEJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAe2C,KAAK,aAAaI,KAAK,OAAOC,YAAY,yBAAyBC,SAAUT,KAEjH,yBAAKxC,UAAU,YACX,4BAAQA,UAAU,eAAe2C,KAAK,WAAWM,SAAUT,GACvD,4BAAQvB,MAAM,IAAd,0BACCX,EAAW4C,KAAI,SAAAC,GAAO,OACnB,4BAAQC,IAAKD,EAAQE,YAAapC,MAAOkC,EAAQE,aAAcF,EAAQE,kBAInF,yBAAKrD,UAAU,YACX,2BAAOA,UAAU,4BAA4B+C,KAAK,SAAS9B,MAAM,qBAGxEmB,EAAQ,kBAAC,EAAD,CAAOH,QAAQ,uCAAgD,OCpDvEqB,EAAepD,0BA0BbqD,EAxBO,SAAAnD,GAAU,IAAD,EAEKC,mBAAS,MAFd,mBAEpBmD,EAFoB,KAEVC,EAFU,OAGapD,mBAAS,IAHtB,mBAGpBqD,EAHoB,KAGNC,EAHM,KAgB3B,OAXAnD,qBAAU,WACN,GAAiB,OAAbgD,EAAmB,EACK,qBAAA/C,EAAAC,OAAA,uDACdmB,EADc,mEACoD2B,GADpD,WAAA/C,EAAA,MAECE,IAAMC,IAAIiB,IAFX,OAEdC,EAFc,OAGpB6B,EAAgB7B,EAAOjB,KAAKC,OAAO,IAHf,qCAKxB8C,MAEL,CAACJ,IAGA,kBAACF,EAAatC,SAAd,CAAuBC,MAAO,CAAEyC,eAAcC,kBAAiBF,gBAC1DrD,EAAMc,W,gBCjBb2C,EAAgB,WAIlB,MAAO,CACHC,IAAI,GAAD,OAJK,GAIL,KACHC,KAAK,GAAD,OAJK,GAIL,KACJC,UAAU,cAAD,OAND,GAMC,eALA,GAKA,QAIXC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACHC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,UAAWP,EAAMQ,QAAQ,GACzBC,QAAST,EAAMU,QAAQ,EAAG,EAAG,QAqEtBC,EAjEI,WAAO,IAAD,EAGAzE,mBAASwD,GAAvBkB,EAHc,sBAIG1E,oBAAS,GAJZ,mBAId2E,EAJc,KAIRC,EAJQ,KAKfC,EAAUjB,IAUR1C,EAAYY,qBAAWhB,GAAvBI,QAfa,EAgBkCY,qBAAWmB,GAA1DI,EAhBa,EAgBbA,aAAcC,EAhBD,EAgBCA,gBAAiBF,EAhBlB,EAgBkBA,YAYvC,OACI,yBAAKzD,UAAU,YACVuB,EAAQ2B,KAAI,SAAAC,GAAO,OAChB,yBAAKnD,UAAU,gBAAgBoD,IAAKD,EAAQgC,SACxC,yBAAKnF,UAAU,QACX,wBAAIA,UAAU,eAAc,gCAASmD,EAAQiC,WAC7C,yBAAKpF,UAAU,eAAeqF,IAAKlC,EAAQmC,cAAeC,IAAG,oBAAepC,EAAQiC,YACpF,yBAAKpF,UAAU,aACX,4BAAQA,UAAU,oCAAoCwF,QAAS,WAC3D/B,EAAYN,EAAQgC,SA7B5CF,GAAQ,KAgCgB,qDAMpB,kBAACQ,EAAA,EAAD,CAAOT,KAAMA,EAAMU,QAAS,WACxBjC,EAAY,MACZE,EAAgB,IApCxBsB,GAAQ,KAuCA,yBAAKjF,UAAWkF,EAAQd,MAAOuB,MAAOZ,GAClC,4BAAKrB,EAAa0B,UAClB,wBAAIpF,UAAU,QAAQ0D,EAAa0B,SAAW,eAAiB,cAC/D,2BAAI1B,EAAakC,iBACjB,yBAAK5F,UAAU,iBAAiBqF,IAAK3B,EAAa4B,gBACjD5B,EAAa0B,SAAW,2CAAuB,KAtCxC,SAAAS,GAEpB,IADA,IAAIC,EAAc,GACTC,EAAQ,EAAGA,GAAS,GAAIA,IACzBF,EAAO,gBAAD,OAAiBE,KACvBD,EAAYE,KAAK,wBAAI5C,IAAK2C,GAAQF,EAAO,gBAAD,OAAiBE,IAAxC,MAAqDF,EAAO,aAAD,OAAcE,MAGlG,OAAOD,EAgCMG,CAAgBvC,OC1DtBwC,EAlBH,WACR,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,yBAAKlG,UAAU,kBACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,OAEJ,kBAAC,EAAD,WCNJmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c570ad67.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary justify-content-center\">\r\n            <strong className=\"navbar-brand\">Buscar Recetas de Bebidas</strong>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const CategoriesContext = createContext(); // Crea el context\r\n\r\nconst CategoriesProvider = props => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        /*  axios.get('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list')\r\n         .then(response => {\r\n             console.log(response);\r\n         })\r\n         .catch(error => {\r\n             console.log(error);\r\n         }); */\r\n\r\n        const getCategories = async () => {\r\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n            const categories = await axios.get(url);\r\n            setCategories(categories.data.drinks);\r\n        }\r\n        getCategories();\r\n    }, []);\r\n\r\n    return (\r\n        <CategoriesContext.Provider value={{ categories }}>\r\n            {props.children}\r\n        </CategoriesContext.Provider>\r\n    );\r\n    \r\n}\r\n\r\nexport default CategoriesProvider;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const RecipesContext = createContext();\r\n\r\nconst RecipesProvider = props => {\r\n\r\n    const [consult, setConsult] = useState(false);\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [searchRecipes, setSearchRecipes] = useState({\r\n        ingredient: '',\r\n        category: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (consult) {\r\n            const getRecipes = async () => {\r\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${searchRecipes.ingredient}&c=${searchRecipes.category}`;\r\n                const result = await axios.get(url);\r\n                setRecipes(result.data.drinks);\r\n            }\r\n            getRecipes();\r\n        }\r\n    }, [searchRecipes]);\r\n\r\n    return (\r\n        <RecipesContext.Provider value={{ recipes, setSearchRecipes, setConsult }}>\r\n            {props.children}\r\n        </RecipesContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default RecipesProvider;","import React from 'react';\r\n\r\nconst Error = ({ message }) => {\r\n    return (\r\n        <div className=\"alert alert-danger col-sm-4 text-center mt-4 mx-auto rounded-pill\">\r\n            <strong>{message}</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import React, { useContext, useState } from 'react';\r\nimport { CategoriesContext } from '../context/CategoriesContext';\r\nimport { RecipesContext } from '../context/RecipesContext';\r\nimport Error from './Error';\r\n\r\nconst Form = () => {\r\n\r\n    const { categories } = useContext(CategoriesContext);\r\n    const { setSearchRecipes, setConsult } = useContext(RecipesContext);\r\n\r\n    const [error, setError] = useState(false);\r\n    const [search, setSearch] = useState({\r\n        ingredient: '',\r\n        category: ''\r\n    });\r\n\r\n    const getFormData = event => {\r\n        setSearch({\r\n            ...search,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (search.ingredient.trim() === '' || search.category.trim() === '') {\r\n            setError(true);\r\n        } else {\r\n            setError(false);\r\n            setSearchRecipes(search);\r\n            setConsult(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"col-12\" onSubmit={handleSubmit}>\r\n            <fieldset className=\"text-center\">\r\n                <legend>Busca por Categor√≠a o Ingredientes</legend>\r\n            </fieldset>\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col-md-4\">\r\n                    <input className=\"form-control\" name=\"ingredient\" type=\"text\" placeholder=\"Buscar por ingrediente\" onChange={getFormData} />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <select className=\"form-control\" name=\"category\" onChange={getFormData}>\r\n                        <option value=\"\">Busca por categor√≠a</option>\r\n                        {categories.map(element => (\r\n                            <option key={element.strCategory} value={element.strCategory}>{element.strCategory}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <input className=\"btn btn-block btn-primary\" type=\"submit\" value=\"Buscar recetas\" />\r\n                </div>\r\n            </div>\r\n            {error ? <Error message=\"Todos los campos son obligatorios.\"></Error> : null}\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect, createContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const ModalContext = createContext();\r\n\r\nconst ModalProvider = props => {\r\n\r\n    const [recipeId, setRecipeId] = useState(null);\r\n    const [recipeDetail, setRecipeDetail] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (recipeId !== null) {\r\n            const getRecipeDetail = async () => {\r\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${recipeId}`;\r\n                const result = await axios.get(url);\r\n                setRecipeDetail(result.data.drinks[0]);\r\n            }\r\n            getRecipeDetail();\r\n        }\r\n    }, [recipeId]);\r\n\r\n    return (\r\n        <ModalContext.Provider value={{ recipeDetail, setRecipeDetail, setRecipeId }}>\r\n            {props.children}\r\n        </ModalContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default ModalProvider;","import React, { useContext, useState } from 'react';\r\nimport { RecipesContext } from '../context/RecipesContext';\r\nimport { ModalContext } from '../context/ModalContext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nconst getModalStyle = () => {\r\n    const top = 50;\r\n    const left = 50;\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 450,\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst RecipeList = () => {\r\n\r\n\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const { recipes } = useContext(RecipesContext);\r\n    const { recipeDetail, setRecipeDetail, setRecipeId } = useContext(ModalContext);\r\n\r\n    const showIngredients = detail => {\r\n        let ingredients = [];\r\n        for (let index = 1; index <= 15; index++) {\r\n            if (detail[`strIngredient${index}`]) {\r\n                ingredients.push(<li key={index}>{detail[`strIngredient${index}`]} - {detail[`strMeasure${index}`]}</li>);\r\n            }\r\n        }\r\n        return ingredients;\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mt-5\">\r\n            {recipes.map(element =>\r\n                <div className=\"col-md-4 mb-3\" key={element.idDrink}>\r\n                    <div className=\"card\">\r\n                        <h2 className=\"card-header\"><strong>{element.strDrink}</strong></h2>\r\n                        <img className=\"card-img-top\" src={element.strDrinkThumb} alt={`Imagen de ${element.strDrink}`} />\r\n                        <div className=\"card-body\">\r\n                            <button className=\"btn btn-block btn-outline-warning\" onClick={() => {\r\n                                setRecipeId(element.idDrink);\r\n                                handleOpen();\r\n                            }}>\r\n                                <strong>Ver Receta</strong>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <Modal open={open} onClose={() => {\r\n                setRecipeId(null);\r\n                setRecipeDetail({});\r\n                handleClose();\r\n            }}>\r\n                <div className={classes.paper} style={modalStyle}>\r\n                    <h1>{recipeDetail.strDrink}</h1>\r\n                    <h3 className=\"mt-4\">{recipeDetail.strDrink ? 'Instructions' : 'Loading...'}</h3>\r\n                    <p>{recipeDetail.strInstructions}</p>\r\n                    <img className=\"img-fluid my-4\" src={recipeDetail.strDrinkThumb} />\r\n                    {recipeDetail.strDrink ? <h3>Ingredients</h3> : null}\r\n                    {showIngredients(recipeDetail)}\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default RecipeList;","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Form from './components/Form';\r\nimport RecipeList from './components/RecipeList';\r\nimport CategoriesProvider from './context/CategoriesContext';\r\nimport RecipesProvider from './context/RecipesContext';\r\nimport ModalProvider from './context/ModalContext';\r\n\r\nconst App = () => {\r\n    return (\r\n        <CategoriesProvider>\r\n            <RecipesProvider>\r\n                <ModalProvider>\r\n                    <Header />\r\n                    <div className=\"container mt-5\">\r\n                        <div className=\"row\">\r\n                            <Form />\r\n                        </div>\r\n                        <RecipeList />\r\n                    </div>\r\n                </ModalProvider>\r\n            </RecipesProvider>\r\n        </CategoriesProvider>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}